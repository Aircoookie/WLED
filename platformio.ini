; PlatformIO Project Configuration File
; Please visit documentation: https://docs.platformio.org/page/projectconf.html

[platformio]
# ------------------------------------------------------------------------------
# ENVIRONMENTS
#
# Please uncomment one of the lines below to select your board(s)
# (use `platformio_override.ini` when building for your own board; see `platformio_override.ini.sample` for an example)
# ------------------------------------------------------------------------------

# CI/release binaries
default_envs = nodemcuv2, esp8266_2m, esp01_1m_full, nodemcuv2_160, esp8266_2m_160, esp01_1m_full_160, esp32dev, esp32_eth, esp32dev_audioreactive, lolin_s2_mini, esp32c3dev, esp32s3dev_16MB_opi, esp32s3dev_8MB_opi, esp32s3_4M_qspi, esp32_wrover

src_dir  = ./wled00
data_dir = ./wled00/data
build_cache_dir = ~/.buildcache
extra_configs =
  platformio_override.ini

[common]
# ldscript (available ldscripts at https://github.com/esp8266/Arduino/tree/master/tools/sdk/ld)
#    ldscript_2m1m (2048 KB) = 1019 KB sketch, 4 KB eeprom, 1004 KB spiffs, 16 KB reserved
#    ldscript_4m1m (4096 KB) = 1019 KB sketch, 4 KB eeprom, 1002 KB spiffs, 16 KB reserved, 2048 KB empty/ota?
ldscript_1m128k = eagle.flash.1m128.ld
ldscript_2m512k = eagle.flash.2m512.ld
ldscript_2m1m = eagle.flash.2m1m.ld
ldscript_4m1m = eagle.flash.4m1m.ld

# ------------------------------------------------------------------------------
# FLAGS: DEBUG
# esp8266 : see https://docs.platformio.org/en/latest/platforms/espressif8266.html#debug-level
# esp32   : see https://docs.platformio.org/en/latest/platforms/espressif32.html#debug-level
# ------------------------------------------------------------------------------
debug_flags =
  -g
  -DDEBUG=1
  -DWLED_DEBUG
  -DDEBUG_ESP_WIFI
  -DDEBUG_ESP_HTTP_CLIENT
  -DDEBUG_ESP_HTTP_UPDATE
  -DDEBUG_ESP_HTTP_SERVER
  -DDEBUG_ESP_UPDATER
  -DDEBUG_ESP_OTA
  -DDEBUG_TLS_MEM
  # if needed (for memleaks etc) also add; -DDEBUG_ESP_OOM -include "umm_malloc/umm_malloc_cfg.h"
  # -DDEBUG_ESP_CORE is not working right now

# ------------------------------------------------------------------------------
# COMMON SETTINGS:
# ------------------------------------------------------------------------------

[env]
framework = arduino
board_build.flash_mode = dout
monitor_speed = 115200
# slow upload speed but most compatible (use platformio_override.ini to use faster speed)
upload_speed = 115200

# ------------------------------------------------------------------------------
# LIBRARIES: required dependencies
#   Please note that we don't always use the latest version of a library.
#
#   The following libraries have been included (and some of them changed) in the source:
#     ArduinoJson@5.13.5, E131@1.0.0(changed), Time@1.5, Timezone@1.2.1
# ------------------------------------------------------------------------------
lib_compat_mode = strict
lib_deps =
    fastled/FastLED @ 3.7.0
    IRremoteESP8266 @ 2.8.2
    makuna/NeoPixelBus @ 2.8.0
    #https://github.com/makuna/NeoPixelBus.git#CoreShaderBeta
    https://github.com/Aircoookie/ESPAsyncWebServer.git @ 2.2.1
  # for I2C interface
    ;Wire
  # ESP-NOW library
    ;gmag11/QuickESPNow @ ~0.7.0
    https://github.com/blazoncek/QuickESPNow.git#optional-debug
  #For use of the TTGO T-Display ESP32 Module with integrated TFT display uncomment the following line
    #TFT_eSPI
  #For compatible OLED display uncomment following
    #olikraus/U8g2 #@ ~2.33.15
  #For Dallas sensor uncomment following
    #paulstoffregen/OneWire @ ~2.3.8
  #For BME280 sensor uncomment following
    #BME280 @ ~3.0.0
    ;adafruit/Adafruit BMP280 Library @ 2.1.0
    ;adafruit/Adafruit CCS811 Library @ 1.0.4
    ;adafruit/Adafruit Si7021 Library @ 1.4.0
  #For ADS1115 sensor uncomment following
    ;adafruit/Adafruit BusIO @ 1.13.2
    ;adafruit/Adafruit ADS1X15 @ 2.4.0
  #For MAX1704x Lipo Monitor / Fuel Gauge uncomment following
    ; https://github.com/adafruit/Adafruit_BusIO @ 1.14.5
    ; https://github.com/adafruit/Adafruit_MAX1704X @ 1.0.2
  #For MPU6050 IMU uncomment follwoing
    ;electroniccats/MPU6050 @1.0.1
  # For -DUSERMOD_ANIMARTRIX
  # CC BY-NC 3.0 licensed effects by Stefan Petrick, include this usermod only if you accept the terms!
    ;https://github.com/netmindz/animartrix.git#18bf17389e57c69f11bc8d04ebe1d215422c7fb7
  # SHT85
    ;robtillaart/SHT85@~0.3.3
  # Audioreactive usermod
    ;kosme/arduinoFFT @ 2.0.1

extra_scripts =
  pre:pio-scripts/set_version.py
  post:pio-scripts/output_bins.py
  post:pio-scripts/strip-floats.py
  pre:pio-scripts/user_config_copy.py
  pre:pio-scripts/build_ui.py
  ; post:pio-scripts/obj-dump.py  ;; convenience script to create a disassembly dump of the firmware (hardcore debugging)

# ------------------------------------------------------------------------------
# Available lwIP variants (macros):
#    -DPIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH  = v1.4 Higher Bandwidth (default)
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY       = v2 Lower Memory
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH = v2 Higher Bandwidth
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
#
# BearSSL performance:
#  When building with -DSECURE_CLIENT=SECURE_CLIENT_BEARSSL, please add `board_build.f_cpu = 160000000` to the environment configuration
#
# BearSSL ciphers:
#   When building on core >= 2.5, you can add the build flag -DBEARSSL_SSL_BASIC in order to build BearSSL with a limited set of ciphers:
#     TLS_RSA_WITH_AES_128_CBC_SHA256 / AES128-SHA256
#     TLS_RSA_WITH_AES_256_CBC_SHA256 / AES256-SHA256
#     TLS_RSA_WITH_AES_128_CBC_SHA / AES128-SHA
#     TLS_RSA_WITH_AES_256_CBC_SHA / AES256-SHA
#  This reduces the OTA size with ~45KB, so it's especially useful on low memory boards (512k/1m).
# ------------------------------------------------------------------------------
build_flags =
  -std=gnu++17
  -DMQTT_MAX_PACKET_SIZE=1024
  -DSECURE_CLIENT=SECURE_CLIENT_BEARSSL
  -DBEARSSL_SSL_BASIC
  -DCORE_DEBUG_LEVEL=0
  -DNDEBUG
  -Wno-attributes ; silence warnings about unknown attribute 'maybe_unused' in NeoPixelBus
  #build_flags for the IRremoteESP8266 library (enabled decoders have to appear here)
  -D_IR_ENABLE_DEFAULT_=false
  -DDECODE_HASH=true
  -DDECODE_NEC=true
  -DDECODE_SONY=true
  -DDECODE_SAMSUNG=true
  -DDECODE_LG=true
  -DWLED_USE_MY_CONFIG
  ; ${common.debug_flags}

build_unflags =
  -std=gnu++11

[esp8266]
platform = espressif8266@4.2.1
monitor_filters = esp8266_exception_decoder
build_flags =
  ${env.build_flags}
  -DESP8266
  -DFP_IN_IROM
  ;-Wno-deprecated-declarations
  ;-Wno-register  ;; leaves some warnings when compiling C files: command-line option '-Wno-register' is valid for C++/ObjC++ but not for C
  ;-Dregister= # remove warnings in C++17 due to use of deprecated register keyword by the FastLED library ;; warning: this can be dangerous
  -Wno-misleading-indentation
  ; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
  -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
  ; lwIP 2 - Higher Bandwidth no Features
  ;  -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
  ; lwIP 1.4 - Higher Bandwidth (Aircoookie has)
  -DPIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH
  ; VTABLES in Flash
  -DVTABLES_IN_FLASH
  ; restrict to minimal mime-types
  -DMIMETYPE_MINIMAL
  ; other special-purpose framework flags (see https://docs.platformio.org/en/latest/platforms/espressif8266.html)
  ; decrease code cache size and increase IRAM to fit all pixel functions
  -DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48 ;; in case of linker errors like "section `.text1' will not fit in region `iram1_0_seg'"
  ; -DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED ;; (experimental) adds some extra heap, but may cause slowdown

lib_deps =
  ${env.lib_deps}
  ESPAsyncTCP @ 1.2.2
  ESPAsyncUDP

[esp32]
platform = espressif32@6.7.0
; platform_packages = toolchain-xtensa-esp32@~12.2
monitor_filters = esp32_exception_decoder
build_flags =
  ${env.build_flags}
  -DARDUINO_ARCH_ESP32
  -DCONFIG_ASYNC_TCP_USE_WDT=0
  ; -DARDUINO_USB_CDC_ON_BOOT=0 ;; this flag is mandatory for "classic ESP32" when building with arduino-esp32 >=2.0.3
tiny_partitions = tools/WLED_ESP32_2MB_noOTA.csv
default_partitions = tools/WLED_ESP32_4MB_1MB_FS.csv
extended_partitions = tools/WLED_ESP32_4MB_700k_FS.csv
big_partitions = tools/WLED_ESP32_4MB_256KB_FS.csv     ;; 1.8MB firmware, 256KB filesystem, coredump support
large_partitions = tools/WLED_ESP32_8MB.csv
extreme_partitions = tools/WLED_ESP32_16MB_9MB_FS.csv
board_build.partitions = ${esp32.default_partitions}
lib_deps =
  ${env.lib_deps}
  https://github.com/pbolduc/AsyncTCP.git @ 1.2.0
# additional build flags for audioreactive
AR_build_flags = -DUSERMOD_AUDIOREACTIVE
AR_lib_deps = kosme/arduinoFFT @ 2.0.1

[esp32_idf_V4]
;; experimental build environment for ESP32 using ESP-IDF 4.4.x / arduino-esp32 v2.0.5
;;
;; please note that you can NOT update existing ESP32 installs with a "V4" build. Also updating by OTA will not work properly.
;; You need to completely erase your device (esptool erase_flash) first, then install the "V4" build from VSCode+platformio.
extends = esp32
build_flags =
  ${esp32.build_flags}
  -Wshadow=compatible-local ;; emit warning in case a local variable "shadows" another local one
  -DESP32
  -DARDUINO_USB_CDC_ON_BOOT=0 ;; this flag is mandatory for "classic ESP32" when building with arduino-esp32 >=2.0.3

[esp32s2]
;; generic definitions for all ESP32-S2 boards
extends = esp32
build_flags =
  ${esp32.build_flags}
  -DARDUINO_ARCH_ESP32S2
  -DCONFIG_IDF_TARGET_ESP32S2=1
  -DCONFIG_ASYNC_TCP_USE_WDT=0
  -DARDUINO_USB_MSC_ON_BOOT=0
  -DARDUINO_USB_DFU_ON_BOOT=0
  -DCO
  -DARDUINO_USB_MODE=0 ;; this flag is mandatory for ESP32-S2 !
  ;; please make sure that the following flags are properly set (to 0 or 1) by your board.json, or included in your custom platformio_override.ini entry:
  ;; ARDUINO_USB_CDC_ON_BOOT

[esp32s3]
;; generic definitions for all ESP32-S3 boards
extends = esp32
build_flags =
  ${esp32.build_flags}
  -DESP32
  -DARDUINO_ARCH_ESP32S3
  -DCONFIG_IDF_TARGET_ESP32S3=1
  -DCONFIG_ASYNC_TCP_USE_WDT=0
  -DARDUINO_USB_MSC_ON_BOOT=0 -DARDUINO_DFU_ON_BOOT=0
  -DCO
  ;; please make sure that the following flags are properly set (to 0 or 1) by your board.json, or included in your custom platformio_override.ini entry:
  ;; ARDUINO_USB_MODE, ARDUINO_USB_CDC_ON_BOOT

[esp32c3]
;; generic definitions for all ESP32-C3 boards
extends = esp32
build_flags =
  ${esp32.build_flags}
  -DARDUINO_ARCH_ESP32C3
  -DCONFIG_IDF_TARGET_ESP32C3=1
  -DCONFIG_ASYNC_TCP_USE_WDT=0
  -DCO
  -DARDUINO_USB_MODE=1 ;; this flag is mandatory for ESP32-C3
  ;; please make sure that the following flags are properly set (to 0 or 1) by your board.json, or included in your custom platformio_override.ini entry:
  ;; ARDUINO_USB_CDC_ON_BOOT


# ------------------------------------------------------------------------------
# WLED BUILDS
# ------------------------------------------------------------------------------

[env:nodemcuv2]
extends = esp8266
board = nodemcuv2
board_build.ldscript = ${common.ldscript_4m1m}
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP8266
  #-DWLED_DISABLE_2D

[env:nodemcuv2_160]
extends = env:nodemcuv2
board_build.f_cpu = 160000000L
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP8266_160
  #-DWLED_DISABLE_2D

[env:esp8266_2m]
extends = esp8266
board = esp_wroom_02
board_build.ldscript = ${common.ldscript_2m512k}
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP02

[env:esp8266_2m_160]
extends = env:esp8266_2m
board_build.f_cpu = 160000000L
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP02_160

[env:esp01_1m_full]
extends = esp8266
board = esp01_1m
board_build.ldscript = ${common.ldscript_1m128k}
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP01
  -DWLED_DISABLE_OTA
  ; -DWLED_USE_REAL_MATH ;; may fix wrong sunset/sunrise times, at the cost of 7064 bytes FLASH and 975 bytes RAM

[env:esp01_1m_full_160]
extends = env:esp01_1m_full
board_build.f_cpu = 160000000L
build_flags =
  ${esp8266.build_flags}
  -DWLED_RELEASE_NAME=ESP01_160
  -DWLED_DISABLE_OTA
  ; -DWLED_USE_REAL_MATH ;; may fix wrong sunset/sunrise times, at the cost of 7064 bytes FLASH and 975 bytes RAM

[env:esp32dev]
extends = esp32
board = esp32dev
build_flags =
  ${esp32.build_flags}
  -DWLED_RELEASE_NAME=ESP32
  #-DWLED_DISABLE_BROWNOUT_DET

[env:esp32dev_8M]
extends = esp32_idf_V4
board = esp32dev
build_flags =
  ${esp32_idf_V4.build_flags}
  -DWLED_RELEASE_NAME=ESP32_8M
  #-DWLED_DISABLE_BROWNOUT_DET
  ${esp32.AR_build_flags}
lib_deps =
  ${esp32_idf_V4.lib_deps}
  ${esp32.AR_lib_deps}
board_build.partitions = ${esp32.large_partitions}
; board_build.f_flash = 80000000L

[env:esp32dev_audioreactive]
extends = esp32
board = esp32dev
build_flags =
  ${esp32.build_flags}
  -DWLED_RELEASE_NAME=ESP32_audioreactive
  #-DWLED_DISABLE_BROWNOUT_DET
  ${esp32.AR_build_flags}
lib_deps =
  ${esp32.lib_deps}
  ${esp32.AR_lib_deps}
; board_build.f_flash = 80000000L
; board_build.flash_mode = dio

[env:esp32_eth]
extends = esp32
board = esp32-poe
upload_speed = 921600
build_flags =
  ${esp32.build_flags}
  -DWLED_RELEASE_NAME=ESP32_Ethernet
  -DRLYPIN=-1
  -DWLED_USE_ETHERNET
  -DBTNPIN=-1
  -DWLED_DISABLE_ESPNOW ;; ESP-NOW requires wifi, may crash with ethernet only

[env:esp32_wrover]
extends = esp32_idf_V4
board = ttgo-t7-v14-mini32
board_build.f_flash = 80000000L
board_build.flash_mode = qio
build_flags =
  ${esp32_idf_V4.build_flags}
  -DWLED_RELEASE_NAME=ESP32_WROVER
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue ;; Older ESP32 (rev.<3) need a PSRAM fix (increases static RAM used) https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-guides/external-ram.html
  -DLEDPIN=25
  ; ${esp32.AR_build_flags}

[env:esp32c3dev]
extends = esp32c3
board = esp32-c3-devkitm-1
build_flags =
  ${esp32c3.build_flags}
  -DWLED_RELEASE_NAME=ESP32-C3
  -DWLED_WATCHDOG_TIMEOUT=0
  -DLOLIN_WIFI_FIX ; seems to work much better with this
  -DARDUINO_USB_CDC_ON_BOOT=1 ;; for virtual CDC USB
  ;-DARDUINO_USB_CDC_ON_BOOT=0   ;; for serial-to-USB chip
upload_speed = 460800

[env:esp32s3dev_16MB_opi]
;; ESP32-S3 development board, with 16MB FLASH and >= 8MB PSRAM (memory_type: qio_opi)
extends = esp32s3
board = esp32-s3-devkitc-1 ;; generic dev board; the next line adds PSRAM support
board_build.arduino.memory_type = qio_opi     ;; use with PSRAM: 8MB or 16MB
upload_speed = 921600
build_flags =
  ${esp32s3.build_flags}
  -DWLED_RELEASE_NAME=ESP32-S3_16MB_opi
  -DCONFIG_LITTLEFS_FOR_IDF_3_2
  -DWLED_WATCHDOG_TIMEOUT=0
  ;-DARDUINO_USB_CDC_ON_BOOT=0  ;; -DARDUINO_USB_MODE=1 ;; for boards with serial-to-USB chip
  -DARDUINO_USB_CDC_ON_BOOT=1 -DARDUINO_USB_MODE=1      ;; for boards with USB-OTG connector only (USBCDC or "TinyUSB")
  -DBOARD_HAS_PSRAM
  ${esp32.AR_build_flags}
lib_deps =
  ${esp32s3.lib_deps}
  ${esp32.AR_lib_deps}
board_build.partitions = ${esp32.extreme_partitions}
board_build.flash_mode = qio
board_build.f_flash = 80000000L

[env:esp32s3dev_8MB_opi]
;; ESP32-S3 development board, with 8MB FLASH and >= 8MB PSRAM (memory_type: qio_opi)
extends = env:esp32s3dev_16MB_opi
build_flags =
  ${esp32s3.build_flags}
  -DWLED_RELEASE_NAME=ESP32-S3_8MB_opi
  -DCONFIG_LITTLEFS_FOR_IDF_3_2
  -DWLED_WATCHDOG_TIMEOUT=0
  ;-DARDUINO_USB_CDC_ON_BOOT=0  ;; -DARDUINO_USB_MODE=1 ;; for boards with serial-to-USB chip
  -DARDUINO_USB_CDC_ON_BOOT=1 -DARDUINO_USB_MODE=1      ;; for boards with USB-OTG connector only (USBCDC or "TinyUSB")
  -DBOARD_HAS_PSRAM
  ${esp32.AR_build_flags}
board_build.partitions = ${esp32.large_partitions}

[env:esp32s3_4M_qspi]
;; ESP32-S3, with 4MB FLASH and <= 4MB PSRAM (memory_type: qio_qspi)
extends = esp32s3
board = lolin_s3_mini ;; -S3 mini, 4MB flash 2MB PSRAM
upload_speed = 921600
build_flags =
  ${esp32s3.build_flags}
  -DWLED_RELEASE_NAME=ESP32-S3_4M_qspi
  -DARDUINO_USB_CDC_ON_BOOT=1 -DARDUINO_USB_MODE=1      ;; for boards with USB-OTG connector only (USBCDC or "TinyUSB")
  -DBOARD_HAS_PSRAM
  -DLOLIN_WIFI_FIX ; seems to work much better with this
  -DWLED_WATCHDOG_TIMEOUT=0
  ${esp32.AR_build_flags}
lib_deps =
  ${esp32s3.lib_deps}
  ${esp32.AR_lib_deps}
board_build.flash_mode = qio
board_build.f_flash = 80000000L

[env:lolin_s2_mini]
extends = esp32s2
board = lolin_s2_mini
board_build.flash_mode = qio
board_build.f_flash = 80000000L
build_flags =
  ${esp32s2.build_flags}
  -DWLED_RELEASE_NAME=ESP32-S2
  -DARDUINO_USB_CDC_ON_BOOT=1
  -DBOARD_HAS_PSRAM
  -DLOLIN_WIFI_FIX ; seems to work much better with this
  -DWLED_WATCHDOG_TIMEOUT=0
  -DLEDPIN=16
  -DHW_PIN_SCL=35
  -DHW_PIN_SDA=33
  -DHW_PIN_CLOCKSPI=7
  -DHW_PIN_DATASPI=11
  -DHW_PIN_MISOSPI=9
;  -DSTATUSLED=15
  ${esp32.AR_build_flags}
lib_deps =
  ${esp32s2.lib_deps}
  ${esp32.AR_lib_deps}

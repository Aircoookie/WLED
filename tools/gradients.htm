<html>
    <head>
        <title>Gradient Editor</title>
        <style>
            body {
                display: flex;
                flex-direction: column;
                height: 100%;
                padding: 0 2rem;
                margin: 0;
                overflow: hidden;
                user-select: none;
            }
            #grad {
                height: 100px;
                position: relative;
            }
            #grad span {
                display: block;
                width: calc(1rem - 2px);
                height: calc(1rem - 2px);
                position: absolute;
                bottom: -.5rem;
                border: 1px solid #fff;
                border-radius: .5rem;
                cursor: ew-resize;
                filter: drop-shadow(0px 0px 2px #555);
                z-index: 999;
            }
            #grad span.ghost {
                opacity: .5;
                pointer-events: none;
            }
            #grad span.boundary {
                cursor: unset;
            }
            #grad span.selected {
                border-color: rgb(0, 153, 255);
                border-width: 2px;
                width: calc(1rem - 4px);
                height: calc(1rem - 4px);
            }
            #grads {
                flex: 1;
            }
            #points {
                flex: 1;
            }
            #color {
                width: 2rem;
                position: relative;
            }
            #code {
                flex: 1;
            }
            #buttons {
                display: flex;
            }
            #buttons button {
                flex: 1;
            }
        </style>
    </head>
    <body>
        <div id="grad"></div>
        <input id="color" type="color" value="#000000" oninput="colorSelect()">
        <select id="grads" size="20" oninput="gradSelect()"></select>
        <div id="buttons">
            <button onclick="readCode()">Read</button>
            <button onclick="writeCode()">Write</button>
        </div>
        <textarea id="code"></textarea>
        <script>
            const p1 = /const\s+byte\s+([a-zA-Z0-9_]+)\s*\[\s*\]\s*PROGMEM\s*=\s*{\s*([^\}]+)\s*};/gm;
            const p2 = /((?:\s*(?:CRGB::[A-Za-z0-9_$]+|0[xX][A-Za-z0-9]{6})\s*,?\s*(?:\/\/[^\n]+)?\s*)+)/gm;
            const p3 = /((?:\s*[0-9]+\s*,??\s*){4}),?(?:\s*\/\/[^\n]+)?/gm;

            const gd = document.querySelector('#grad');
            const gs = document.querySelector('#grads');
            const cs = document.querySelector('#color');
            const ta = document.querySelector('#code');

            var grads = [];
            var grad = undefined;
            var point = undefined;

            var drag = false;
            var points = [];
            var color = undefined;

            function getGhost() {
                return gd.querySelector('span.ghost');
            }

            function removeGhost() {
                var span = getGhost();
                if (span) {
                    span.remove();
                }
            }

            function addGhost() {
                removeGhost();
                gd.insertAdjacentHTML('beforeend', `<span class="ghost"></span>`);
            }

            function getPos(e) {
                var rect = gd.getBoundingClientRect();
                return (e.pageX - rect.x) / rect.width;
            }

            function updateGhost(e) {
                var span = getGhost();
                if (span) {
                    var pos = getPos(e);
                    var percent = pos * 100;
                    span.style.left = `calc(${percent}% - .5rem)`;
                    var col = getColorAt(pos);
                    span.style.background = `rgba(${col.r}, ${col.g}, ${col.b}, 1)`;
                }
            }

            function componentToHex(c) {
                var hex = c.toString(16);
                return hex.length == 1 ? "0" + hex : hex;
            }

            function rgbToHex(r, g, b) {
                return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
            }

            function hexToRgb(hex) {
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : null;
            }

            function parse() {
                grads = [];
                var m = ta.value.matchAll(p1);
                for (const match of m) {
                    var pts;
                    var pmatch = [...match[2].matchAll(p2)];
                    if (pmatch.length != 1) {
                        pmatch = [...match[2].matchAll(p3)];
                        if (pmatch.length == 0) {
                            console.warn('Cannot parse gradient: ' + match[2]);
                            continue;
                        } else {
                            pts = pmatch
                                .map(m => m[1].split(',').map(s => parseInt(s.trim())))
                                .map(a => ({
                                    pos: a[0],
                                    color: {
                                        r: a[1],
                                        g: a[2],
                                        b: a[3]
                                    }
                                }));
                        }
                    } else {
                        var cols = pmatch[0][1]
                            .split(',')
                            .map(s => s.trim())
                            .map(s => s.startsWith('CRGB::') ? colors[s.substring(6)] : parseInt(s))
                            .map(n => ({
                                r: (n & 0xFF0000) >>> 16,
                                g: (n & 0xFF00) >>> 8,
                                b: n & 0xFF
                            }));
                        pts = [];
                        for (i in cols) {
                            pts.push({
                                pos: Math.round(i / (cols.length - 1) * 255),
                                color: cols[i]
                            });
                        }
                    }

                    var grad = {
                        name: match[1],
                        points: pts
                    };
                    grads.push(grad);
                }
            }

            function fillGradsSelect() {
                gs.querySelectorAll('option').forEach(o => o.remove());
                grads.forEach((g, i) => gs.insertAdjacentHTML('beforeend', `<option value="${i}">${g.name}</option>`));
            }

            function selectPoint(el) {
                gd.querySelectorAll('span').forEach(el => el.classList.remove('selected'));
                el.classList.add('selected');
                var idx = parseInt(el.dataset.idx);
                point = grad.points[idx];
                var percent = point.pos / 255 * 100;
                cs.style.left = `calc(${percent}% - 1rem)`;
                cs.value = rgbToHex(point.color.r, point.color.g, point.color.b);
            }

            function generateGradient() {
                gd.querySelectorAll('span').forEach(o => o.remove());

                var g = grad.points.map((p, i) => {
                    var percent = p.pos / 255 * 100;

                    gd.insertAdjacentHTML('beforeend', `<span data-idx="${i}"></span>`);

                    var span = gd.querySelector(`span[data-idx="${i}"]`);
                    span.style.left = `calc(${percent}% - .5rem)`;
                    span.style.background = `rgba(${p.color.r}, ${p.color.g}, ${p.color.b}, 1)`;

                    if (i > 0 && i < grad.points.length - 1) {
                        span.addEventListener('mousedown', e => {
                            drag = true;
                            points = [];
                            var skip = parseInt(span.dataset.idx);
                            for (var i in grad.points) {
                                if (i != skip) {
                                    points.push(grad.points[i]);
                                } else {
                                    color = grad.points[i].color;
                                }
                            }
                        });

                        span.addEventListener('contextmenu', e => {
                            e.preventDefault();
                            e.target.remove();
                            var pts = [];
                            var skip = parseInt(span.dataset.idx);
                            for (var i in grad.points) {
                                if (i != skip) {
                                    pts.push(grad.points[i]);
                                }
                            }
                            grad.points = pts;
                            generateGradient();
                            return false;
                        });
                    } else {
                        span.addEventListener('contextmenu', e => {
                            e.preventDefault();
                            return false;
                        });

                        span.classList.add('boundary');
                    }

                    span.addEventListener('mouseup', e => selectPoint(e.target));

                    return `rgba(${p.color.r}, ${p.color.g}, ${p.color.b}, 1) ${percent}%`
                }).join(', ');

                gd.style.background = `linear-gradient(90deg, ${g})`;
            }

            function getColorAt(pos) {
                for (var i in grad.points) {
                    var p = grad.points[i];
                    var ppos = p.pos / 255;
                    if (ppos > pos) {
                        var prevp = grad.points[i - 1];
                        var prevppos = prevp.pos / 255;
                        var f = (pos - prevppos) / (ppos - prevppos);
                        return {
                            r: Math.round(prevp.color.r + (p.color.r - prevp.color.r) * f),
                            g: Math.round(prevp.color.g + (p.color.g - prevp.color.g) * f),
                            b: Math.round(prevp.color.b + (p.color.b - prevp.color.b) * f)
                        };
                    }
                }
                return { r: 0, g: 0, b: 0 };
            }

            function readCode() {
                parse();
                fillGradsSelect();
            }

            function writeCode() {
                ta.value = ta.value.replaceAll(p1, (match, name, values) => {
                    var grad = grads.find(el => el.name == name);
                    var v;
                    if (grad != undefined) {
                        v = grad.points.map(p => [
                            p.pos.toFixed(0).padStart(5, ' '),
                            p.color.r.toFixed(0).padStart(4, ' '),
                            p.color.g.toFixed(0).padStart(3, ' '),
                            p.color.b.toFixed(0).padStart(3, ' ')
                        ].join(',')).join(',\n')
                    } else {
                        v = values;
                    }
                    console.log()
                    return `const byte ${name}[] PROGMEM = {\n${v}};`;
                });
            }

            function gradSelect() {
                grad = grads[gs.value];
                generateGradient();
                point = undefined;
            }

            function colorSelect() {
                if (point != undefined) {
                    point.color = hexToRgb(cs.value);
                    generateGradient();
                }
            }

            document.addEventListener('mousemove', e => {
                if (drag) {
                    var pos = getPos(e);
                    var pts = [];
                    var added = false;
                    for (var i in points) {
                        var p = points[i];
                        var ppos = p.pos / 255;
                        if (ppos > pos && !added) {
                            added = true;
                            pts.push({
                                pos: Math.round(pos * 255),
                                color: color
                            });
                        }
                        pts.push(p);
                    }
                    grad.points = pts;
                    generateGradient();
                }
            });

            document.addEventListener('mouseup', e => {
                if (drag) {
                    drag = false;
                }
            });

            gd.addEventListener('mouseover', e => {
                if (e.target == gd && grad != undefined && !drag) {
                    addGhost();
                    updateGhost(e);
                }
            });

            gd.addEventListener('mouseout', e => {
                if (e.target == gd) {
                    removeGhost();
                }
            });

            gd.addEventListener('mousemove', e => {
                updateGhost(e);
            });

            gd.addEventListener('mouseup', e => {
                var span = getGhost();
                if (span) {
                    var pos = getPos(e);
                    var col = getColorAt(pos);
                    var pts = [];
                    var added = false;
                    var idx;
                    for (var i in grad.points) {
                        var p = grad.points[i];
                        var ppos = p.pos / 255;
                        if (ppos > pos && !added) {
                            added = true;
                            pts.push({
                                pos: Math.round(pos * 255),
                                color: col
                            });
                            idx = i;
                        }
                        pts.push(p);
                    }
                    grad.points = pts;
                    generateGradient();
                    selectPoint(gd.querySelector(`span[data-idx="${idx}"]`));
                    addGhost();
                    updateGhost(e);
                }
            });
        </script>
        <script>
            const colors = {
                AliceBlue: 0xF0F8FF,
                Amethyst: 0x9966CC,
                AntiqueWhite: 0xFAEBD7,
                Aqua: 0x00FFFF,
                Aquamarine: 0x7FFFD4,
                Azure: 0xF0FFFF,
                Beige: 0xF5F5DC,
                Bisque: 0xFFE4C4,
                Black: 0x000000,
                BlanchedAlmond: 0xFFEBCD,
                Blue: 0x0000FF,
                BlueViolet: 0x8A2BE2,
                Brown: 0xA52A2A,
                BurlyWood: 0xDEB887,
                CadetBlue: 0x5F9EA0,
                Chartreuse: 0x7FFF00,
                Chocolate: 0xD2691E,
                Coral: 0xFF7F50,
                CornflowerBlue: 0x6495ED,
                Cornsilk: 0xFFF8DC,
                Crimson: 0xDC143C,
                Cyan: 0x00FFFF,
                DarkBlue: 0x00008B,
                DarkCyan: 0x008B8B,
                DarkGoldenrod: 0xB8860B,
                DarkGray: 0xA9A9A9,
                DarkGrey: 0xA9A9A9,
                DarkGreen: 0x006400,
                DarkKhaki: 0xBDB76B,
                DarkMagenta: 0x8B008B,
                DarkOliveGreen: 0x556B2F,
                DarkOrange: 0xFF8C00,
                DarkOrchid: 0x9932CC,
                DarkRed: 0x8B0000,
                DarkSalmon: 0xE9967A,
                DarkSeaGreen: 0x8FBC8F,
                DarkSlateBlue: 0x483D8B,
                DarkSlateGray: 0x2F4F4F,
                DarkSlateGrey: 0x2F4F4F,
                DarkTurquoise: 0x00CED1,
                DarkViolet: 0x9400D3,
                DeepPink: 0xFF1493,
                DeepSkyBlue: 0x00BFFF,
                DimGray: 0x696969,
                DimGrey: 0x696969,
                DodgerBlue: 0x1E90FF,
                FireBrick: 0xB22222,
                FloralWhite: 0xFFFAF0,
                ForestGreen: 0x228B22,
                Fuchsia: 0xFF00FF,
                Gainsboro: 0xDCDCDC,
                GhostWhite: 0xF8F8FF,
                Gold: 0xFFD700,
                Goldenrod: 0xDAA520,
                Gray: 0x808080,
                Grey: 0x808080,
                Green: 0x008000,
                GreenYellow: 0xADFF2F,
                Honeydew: 0xF0FFF0,
                HotPink: 0xFF69B4,
                IndianRed: 0xCD5C5C,
                Indigo: 0x4B0082,
                Ivory: 0xFFFFF0,
                Khaki: 0xF0E68C,
                Lavender: 0xE6E6FA,
                LavenderBlush: 0xFFF0F5,
                LawnGreen: 0x7CFC00,
                LemonChiffon: 0xFFFACD,
                LightBlue: 0xADD8E6,
                LightCoral: 0xF08080,
                LightCyan: 0xE0FFFF,
                LightGoldenrodYellow: 0xFAFAD2,
                LightGreen: 0x90EE90,
                LightGrey: 0xD3D3D3,
                LightPink: 0xFFB6C1,
                LightSalmon: 0xFFA07A,
                LightSeaGreen: 0x20B2AA,
                LightSkyBlue: 0x87CEFA,
                LightSlateGray: 0x778899,
                LightSlateGrey: 0x778899,
                LightSteelBlue: 0xB0C4DE,
                LightYellow: 0xFFFFE0,
                Lime: 0x00FF00,
                LimeGreen: 0x32CD32,
                Linen: 0xFAF0E6,
                Magenta: 0xFF00FF,
                Maroon: 0x800000,
                MediumAquamarine: 0x66CDAA,
                MediumBlue: 0x0000CD,
                MediumOrchid: 0xBA55D3,
                MediumPurple: 0x9370DB,
                MediumSeaGreen: 0x3CB371,
                MediumSlateBlue: 0x7B68EE,
                MediumSpringGreen: 0x00FA9A,
                MediumTurquoise: 0x48D1CC,
                MediumVioletRed: 0xC71585,
                MidnightBlue: 0x191970,
                MintCream: 0xF5FFFA,
                MistyRose: 0xFFE4E1,
                Moccasin: 0xFFE4B5,
                NavajoWhite: 0xFFDEAD,
                Navy: 0x000080,
                OldLace: 0xFDF5E6,
                Olive: 0x808000,
                OliveDrab: 0x6B8E23,
                Orange: 0xFFA500,
                OrangeRed: 0xFF4500,
                Orchid: 0xDA70D6,
                PaleGoldenrod: 0xEEE8AA,
                PaleGreen: 0x98FB98,
                PaleTurquoise: 0xAFEEEE,
                PaleVioletRed: 0xDB7093,
                PapayaWhip: 0xFFEFD5,
                PeachPuff: 0xFFDAB9,
                Peru: 0xCD853F,
                Pink: 0xFFC0CB,
                Plaid: 0xCC5533,
                Plum: 0xDDA0DD,
                PowderBlue: 0xB0E0E6,
                Purple: 0x800080,
                Red: 0xFF0000,
                RosyBrown: 0xBC8F8F,
                RoyalBlue: 0x4169E1,
                SaddleBrown: 0x8B4513,
                Salmon: 0xFA8072,
                SandyBrown: 0xF4A460,
                SeaGreen: 0x2E8B57,
                Seashell: 0xFFF5EE,
                Sienna: 0xA0522D,
                Silver: 0xC0C0C0,
                SkyBlue: 0x87CEEB,
                SlateBlue: 0x6A5ACD,
                SlateGray: 0x708090,
                SlateGrey: 0x708090,
                Snow: 0xFFFAFA,
                SpringGreen: 0x00FF7F,
                SteelBlue: 0x4682B4,
                Tan: 0xD2B48C,
                Teal: 0x008080,
                Thistle: 0xD8BFD8,
                Tomato: 0xFF6347,
                Turquoise: 0x40E0D0,
                Violet: 0xEE82EE,
                Wheat: 0xF5DEB3,
                White: 0xFFFFFF,
                WhiteSmoke: 0xF5F5F5,
                Yellow: 0xFFFF00,
                YellowGreen: 0x9ACD32,
                FairyLight: 0xFFE42D,
                FairyLightNCC: 0xFF9D2A
            };
        </script>
    </body>
</html>